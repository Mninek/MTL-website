[{"E:\\mtl_website\\mtl-website\\src\\index.js":"1","E:\\mtl_website\\mtl-website\\src\\reportWebVitals.js":"2","E:\\mtl_website\\mtl-website\\src\\App.js":"3","E:\\mtl_website\\mtl-website\\src\\components\\customCursor\\emojiCursor.js":"4","E:\\mtl_website\\mtl-website\\src\\components\\draft\\Draft.js":"5","E:\\mtl_website\\mtl-website\\src\\components\\home\\homePage.js":"6","E:\\mtl_website\\mtl-website\\src\\components\\navBar\\navBar.js":"7","E:\\mtl_website\\mtl-website\\src\\components\\randomRoll\\RandomRoll.js":"8","E:\\mtl_website\\mtl-website\\src\\components\\images\\MTLLogo.js":"9","E:\\mtl_website\\mtl-website\\src\\components\\Button\\Button.jsx":"10","E:\\mtl_website\\mtl-website\\src\\audio\\PlayBackGroundMusic.js":"11","E:\\mtl_website\\mtl-website\\src\\components\\random\\Random.js":"12","E:\\mtl_website\\mtl-website\\src\\socketConstant.js":"13"},{"size":580,"mtime":1632529319208,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":1044,"mtime":1632461106471,"results":"17","hashOfConfig":"15"},{"size":5112,"mtime":1632678231300,"results":"18","hashOfConfig":"15"},{"size":262,"mtime":1632427132392,"results":"19","hashOfConfig":"15"},{"size":1353,"mtime":1632425729584,"results":"20","hashOfConfig":"15"},{"size":1496,"mtime":1632425577760,"results":"21","hashOfConfig":"15"},{"size":1450,"mtime":1625715160960,"results":"22","hashOfConfig":"15"},{"size":218,"mtime":1621875671523,"results":"23","hashOfConfig":"15"},{"size":854,"mtime":1622001932989,"results":"24","hashOfConfig":"15"},{"size":991,"mtime":1626204833398,"results":"25","hashOfConfig":"15"},{"size":17703,"mtime":1632677823236,"results":"26","hashOfConfig":"15"},{"size":148,"mtime":1632696434124,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1ib0j6s",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\mtl_website\\mtl-website\\src\\index.js",[],["58","59"],"E:\\mtl_website\\mtl-website\\src\\reportWebVitals.js",[],"E:\\mtl_website\\mtl-website\\src\\App.js",[],"E:\\mtl_website\\mtl-website\\src\\components\\customCursor\\emojiCursor.js",[],"E:\\mtl_website\\mtl-website\\src\\components\\draft\\Draft.js",["60"],"import React from 'react';\r\nimport Select from 'react-select';\r\nimport './Draft.css'\r\n\r\nfunction Draft() {\r\n    return (\r\n        <div className=\"DraftPage\">\r\n            Sorry no draft picking ninek too lazy :(\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Draft;","E:\\mtl_website\\mtl-website\\src\\components\\home\\homePage.js",[],"E:\\mtl_website\\mtl-website\\src\\components\\navBar\\navBar.js",["61","62"],"import React, {Component} from 'react';\r\nimport {Button} from '../Button/Button'\r\nimport {Link} from 'react-router-dom';\r\nimport {PlayBackGroundMusic} from '../../audio/PlayBackGroundMusic';\r\n\r\nimport './navBar.css'\r\n\r\nconst MenuItems = [\r\n    {\r\n        title: 'Draft',\r\n        url: '/draft',\r\n        cName: 'nav-links'\r\n    },\r\n    {\r\n        title: 'Random Teams',\r\n        url: '/randomHelper',\r\n        cName: 'nav-links'\r\n    },\r\n    {\r\n        title: 'Random Unit',\r\n        url: '/randomRoll',\r\n        cName: 'nav-links'\r\n    },\r\n    {\r\n        title: 'Unit Stats',\r\n        url: '#',\r\n        cName: 'nav-links'\r\n    },\r\n]\r\n\r\nclass NavBar extends Component {\r\n    state = {clicked: false}\r\n\r\n    handleClick = () => {\r\n        this.setState({clicked: !this.state.clicked})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"Navbar\">\r\n                <Link to='/' className=\"menu-icon\">\r\n                    MTLGGEZL\r\n                </Link>\r\n                <ul className ='nav-menu'>\r\n                    {MenuItems.map((item, index) => {\r\n                        return (\r\n                            <li key = {index}>\r\n                                <a className={item.cName} href={item.url} >\r\n                                    {item.title}\r\n                                </a>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;","E:\\mtl_website\\mtl-website\\src\\components\\randomRoll\\RandomRoll.js",[],"E:\\mtl_website\\mtl-website\\src\\components\\images\\MTLLogo.js",[],"E:\\mtl_website\\mtl-website\\src\\components\\Button\\Button.jsx",[],"E:\\mtl_website\\mtl-website\\src\\audio\\PlayBackGroundMusic.js",[],"E:\\mtl_website\\mtl-website\\src\\components\\random\\Random.js",["63","64","65","66","67"],"import React, {useState} from 'react';\r\nimport Select from 'react-select';\r\nimport './Random.css'\r\nimport {Button} from '../Button/Button'\r\nimport { render } from 'react-dom';\r\n//import io from './components/random/socket/node_modules/socket.io-adapter';\r\nimport {socket} from \"../../socketConstant\";\r\n\r\n//import io from './socket/node_modules/socket.io-client';\r\n\r\nfunction Random() {\r\n\r\n    const [error, setError] = useState(false);\r\n    const [nGames, setnGames] = useState(false);\r\n    const [apiCall, setapiCall] = useState(false);\r\n    const [numGames, setNumGames] = useState(0);\r\n    const [teamOne, setTeamOne] = useState([]);\r\n    const [teamTwo, setTeamTwo] = useState([]);\r\n    const [names, setNames] = useState(['0','1','2','3','4','5','6','7']);\r\n    const [races, setRaces] = useState(['N','N','N','N','N','N','N','N']);\r\n    const [fourGamers, setFourGamers] = useState(true);\r\n    const [nGamers, setnGamers] = useState(false);\r\n    const [noRoomcodeError, setNoRoomcodeError] = useState(true);\r\n    const [joinError, setJoinError] = useState(false);\r\n    const [roomCode, setRoomCode] = useState('test');\r\n    const [selectError, setSelectError] = useState(false);\r\n    const [transfer, setTransfer] = useState(true);\r\n\r\n    //const socket = io('http://localhost:8080');\r\n    socket.on('joinRoomSignal', handleJoinRoomSignal);\r\n    socket.on('setTeams', handleSetTeams);\r\n\r\n    const updateGamers = (e) => {\r\n        if (e.value == 3){\r\n            setFourGamers(false);\r\n        } else {\r\n            setFourGamers(true);\r\n        }\r\n        setnGamers(true);\r\n    }\r\n    const playerNumOptions = [\r\n        //{value: \"3\", label: \"3\"}, only 4 allowed for now\r\n        {value: \"4\", label: \"4\"}\r\n    ];\r\n    \r\n    const setCode = (code) => {\r\n        var tempCode = code;\r\n        setRoomCode(tempCode);\r\n        if (code.length == 6){\r\n            //make sure that this is a valid roomCode\r\n            setNoRoomcodeError(false);\r\n        } else {\r\n            setNoRoomcodeError(true);\r\n        }\r\n    }\r\n\r\n    const joinRoom = () => {\r\n        if (noRoomcodeError){\r\n            setJoinError(true)\r\n        } else{\r\n            socket.emit('joinRoom', roomCode);\r\n        }\r\n    }\r\n\r\n    const createRoom = () => {\r\n        if (nGamers){\r\n            //generate a room code, and then pass the number of gamers and room code to Random class\r\n            var result = '';\r\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n            var charactersLength = 62; //manuually counted characters LOL\r\n            for (var i = 0; i < 6; i++){\r\n                result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n            }\r\n            setRoomCode(result);\r\n            socket.emit('createRoom', result);\r\n            setTransfer(false);\r\n        } else {\r\n            setSelectError(true);\r\n        }\r\n    }\r\n\r\n\r\n    const raceOptions = [\r\n        {value: 'P', label: 'P'},\r\n        {value: 'T', label: 'T'},\r\n        {value: 'Z', label: 'Z'},\r\n        {value: 'R', label: 'R'}\r\n    ];\r\n\r\n    const games = [\r\n        {value: '1', label: '1'},\r\n        {value: '2', label: '2'},\r\n        {value: '3', label: '3'},\r\n        {value: '4', label: '4'},\r\n        {value: '5', label: '5'},\r\n        {value: '6', label: '6'},\r\n        {value: '7', label: '7'},\r\n        {value: '8', label: '8'},\r\n        {value: '9', label: '9'},\r\n        {value: '10', label: '10'},\r\n    ]\r\n\r\n    var racesTest = ['R','R','Z','Z','T','T','P','P'];\r\n\r\n    var tempTeamOne = [];\r\n\r\n    var tempTeamTwo = [];\r\n\r\n    const updateChange = (place) => {\r\n        var tempRaces = races;\r\n        tempRaces[place.pos] = place.value;\r\n        setRaces(tempRaces);\r\n    }\r\n\r\n    const updateGames = (e) => {\r\n        setNumGames(e.value);\r\n        console.log(numGames);\r\n        setnGames(true);\r\n    }\r\n\r\n    const setName = (name, index) => {\r\n        var tempNames = names;\r\n        tempNames[index] = name;\r\n        setNames(tempNames);\r\n        socket.emit('setNameSignal', tempNames,)\r\n    }\r\n\r\n    const rollForTeams = () => {\r\n        if (races.includes('N') || nGames == false){\r\n            setError(true);\r\n            console.log(races);\r\n        } else {\r\n            setError(false);\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    races: JSON.stringify(races),\r\n                    names: JSON.stringify(names),\r\n                    numGames: JSON.stringify(numGames)\r\n                })\r\n            }\r\n            fetch(process.env.REACT_APP_MTL_API+'teamsRandomRoll/', requestOptions)\r\n            .then((response)=>response.json())\r\n            .then((data)=>{\r\n                tempTeamOne = []\r\n                tempTeamTwo = []\r\n                //tempTeamOne.push([data.p0.name, data.p1.name, data.p2.name, data.p3.name])\r\n                //teamTwo.push([data.p4.name, data.p5.name, data.p6.name, data.p7.name])\r\n                for(var i = 0; i < numGames; i++){\r\n                    tempTeamOne.push([data.p0[\"unit\".concat(i.toString())], data.p1[\"unit\".concat(i.toString())], data.p2[\"unit\".concat(i.toString())], data.p3[\"unit\".concat(i.toString())]]);\r\n                    tempTeamTwo.push([data.p4[\"unit\".concat(i.toString())], data.p5[\"unit\".concat(i.toString())], data.p6[\"unit\".concat(i.toString())], data.p7[\"unit\".concat(i.toString())]]);\r\n                }\r\n                setapiCall(true);\r\n                setTeamOne(tempTeamOne);\r\n                setTeamTwo(tempTeamTwo);\r\n                socket.emit('rollForTeams', {'apiCall': true, 'teamOne': tempTeamOne, 'teamTwo' : tempTeamTwo, 'names' : names, 'roomCode' : roomCode});\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n    const generateRoomCode = () => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = caracters.length;\r\n        for (var i = 0; i < length; i++){\r\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n        }\r\n        setRoomCode(result);\r\n    }\r\n    */\r\n\r\n    function sleep(ms) {\r\n        return new Promise((resolve) => {\r\n            setTimeout(resolve, ms);\r\n        });\r\n    }\r\n\r\n    function handleJoinRoomSignal(val){\r\n        console.log(val);\r\n        if(val){\r\n            setTransfer(false);\r\n            sleep(1);\r\n            setJoinError(false);\r\n        } else {\r\n            setJoinError(true);\r\n        }\r\n    }\r\n\r\n    function handleSetTeams(args){\r\n        setapiCall(args['apiCall']);\r\n        setTeamOne(args['teamOne']);\r\n        setTeamTwo(args['teamTwo']);\r\n        setNames(args['names'])\r\n        console.log(\"apiCall below\");\r\n        console.log(apiCall);\r\n    }\r\n\r\n    return (\r\n        transfer ? <div className=\"container\">\r\n            <div className=\"top\">\r\n                <input type=\"text\" placeholder=\"RoomCode\" className=\"inputBoxCode\" onChange={event => setCode(event.target.value)}/>\r\n                <Button onClick={joinRoom}>\r\n                    Join a room\r\n                </Button>\r\n                {joinError &&\r\n                    <p className=\"errorMessage\">\r\n                        Please enter a valid room code\r\n                    </p>\r\n                }\r\n            </div>\r\n            <div className=\"bottom\">\r\n                <p className=\"text\">\r\n                    Enter your opponents room code above, or select the number of gamers per team and create a new room below\r\n                </p>\r\n                <Select className=\"selectButtonGamers\"\r\n                    options = {playerNumOptions} \r\n                    components = {{ DropdownIndicator: () => null, IndicatorSeperator:() => null}}\r\n                    onChange={(val)=> {updateGamers({value: val.value})}}\r\n                />\r\n                <Button onClick={createRoom}>\r\n                    Create room\r\n                </Button>\r\n                {selectError &&\r\n                    <p className=\"errorMessage\">\r\n                        Please select number of gamers per team\r\n                    </p>\r\n                }\r\n            </div>\r\n        </div> :\r\n        fourGamers ?\r\n            <div className=\"container\">\r\n                <div className=\"roomCodeDiv\">Roomcode: {roomCode}</div>\r\n                <div className=\"team1\">\r\n                    Team 1\r\n                    <div className=\"row\">\r\n                        <input type=\"text\" placeholder=\"Player 1\" className=\"inputBox\" onChange={event => setName(event.target.value, 0)}/>\r\n                        <Select className=\"selectButton\"\r\n                            options = {raceOptions} \r\n                            components = {{ DropdownIndicator: () => null, IndicatorSeperator:() => null}}\r\n                            defaultValue={{label: \"Race\", value: 0}}\r\n                            onChange={(val)=> {updateChange({pos: 0, value: val.value, total: 8})}}\r\n                        />\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <input type=\"text\" placeholder=\"Player 2\" className=\"inputBox\" onChange={event => setName(event.target.value, 1)}/>\r\n                        <Select className=\"selectButton\"\r\n                            options = {raceOptions} \r\n                            components = {{ DropdownIndicator: () => null, IndicatorSeperator:() => null}}\r\n                            defaultValue={{label: \"Race\", value: 0}}\r\n                            onChange={(val)=> {updateChange({pos: 1, value: val.value, total: 8})}}\r\n                        />\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <input type=\"text\" placeholder=\"Player 3\" className=\"inputBox\" onChange={event => setName(event.target.value, 2)}/>\r\n                        <Select className=\"selectButton\"\r\n                            options = {raceOptions} \r\n                            components = {{ DropdownIndicator: () => null, IndicatorSeperator:() => null}}\r\n                            defaultValue={{label: \"Race\", value: 0}}\r\n                            onChange={(val)=> {updateChange({pos: 2, value: val.value, total: 8})}}\r\n                        />\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <input type=\"text\" placeholder=\"Player 4\" className=\"inputBox\" onChange={event => setName(event.target.value, 3)}/>\r\n                        <Select className=\"selectButton\"\r\n                            options = {raceOptions} \r\n                            components = {{ DropdownIndicator: () => null, IndicatorSeperator:() => null}}\r\n                            defaultValue={{label: \"Race\", value: 0}}\r\n                            onChange={(val)=> {updateChange({pos: 3, value: val.value, total: 8})}}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"team2\">\r\n                    Team 2\r\n                    <div className=\"row\">\r\n                        <input type=\"text\" placeholder=\"Player 1\" className=\"inputBox\" onChange={event => setName(event.target.value, 4)}/>\r\n                        <Select className=\"selectButton\"\r\n                            options = {raceOptions} \r\n                            components = {{ DropdownIndicator: () => null, IndicatorSeperator:() => null}}\r\n                            defaultValue={{label: \"Race\", value: 0}}\r\n                            onChange={(val)=> {updateChange({pos: 4, value: val.value, total: 8})}}\r\n                        />\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <input type=\"text\" placeholder=\"Player 2\" className=\"inputBox\" onChange={event => setName(event.target.value, 5)}/>\r\n                        <Select className=\"selectButton\"\r\n                            options = {raceOptions} \r\n                            components = {{ DropdownIndicator: () => null, IndicatorSeperator:() => null}}\r\n                            defaultValue={{label: \"Race\", value: 0}}\r\n                            onChange={(val)=> {updateChange({pos: 5, value: val.value, total: 8})}}\r\n                        />\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <input type=\"text\" placeholder=\"Player 3\" className=\"inputBox\" onChange={event => setName(event.target.value, 6)}/>\r\n                        <Select className=\"selectButton\"\r\n                            options = {raceOptions} \r\n                            components = {{ DropdownIndicator: () => null, IndicatorSeperator:() => null}}\r\n                            defaultValue={{label: \"Race\", value: 0}}\r\n                            onChange={(val)=> {updateChange({pos: 6, value: val.value, total: 8})}}\r\n                        />\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <input type=\"text\" placeholder=\"Player 4\" className=\"inputBox\" onChange={event => setName(event.target.value, 7)}/>\r\n                        <Select className=\"selectButton\"\r\n                            options = {raceOptions} \r\n                            components = {{ DropdownIndicator: () => null, IndicatorSeperator:() => null}}\r\n                            defaultValue={{label: \"Race\", value: 0}}\r\n                            onChange={(val)=> {updateChange({pos: 7, value: val.value, total: 8})}}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"textAndButton\">\r\n                    <Select className=\"numGames\"\r\n                            options = {games} \r\n                            components = {{ DropdownIndicator: () => null, IndicatorSeperator:() => null}}\r\n                            defaultValue={{label: \"Number of games\", value: 0}}\r\n                            onChange={(val)=> {updateGames({value: val.value})}}\r\n                        />                    \r\n                    <p className=\"bottomText\">\r\n                        Fill in the names and races of your players, then when both captains are ready press the button below.\r\n                    </p>\r\n                    <Button onClick={rollForTeams}>\r\n                        Press me ( ͡❛ ͜ʖ ͡❛)\r\n                    </Button>\r\n                    {error &&\r\n                        <p className=\"errorMessage\">\r\n                            Please select a race and number of games to roll for\r\n                        </p>\r\n                    }\r\n                </div>\r\n                {apiCall &&\r\n                    <div className=\"parent\">\r\n                        <table className=\"unitTableOuter\">\r\n                            Team One's Units\r\n                            <tbody>\r\n                                <tr className=\"unitTable\">\r\n                                    <th className=\"unitTableEntry\">{names[0]}</th>\r\n                                    <th className=\"unitTableEntry\">{names[1]}</th>\r\n                                    <th className=\"unitTableEntry\">{names[2]}</th>\r\n                                    <th className=\"unitTableEntry\">{names[3]}</th>\r\n                                </tr>\r\n                                {teamOne.map((item, index) => {\r\n                                    return(\r\n                                    <tr key={index} className=\"unitTable\">\r\n                                        <td className=\"unitTableEntry\">{item[0]}</td>\r\n                                        <td className=\"unitTableEntry\">{item[1]}</td>\r\n                                        <td className=\"unitTableEntry\">{item[2]}</td>\r\n                                        <td className=\"unitTableEntry\">{item[3]}</td>\r\n                                    </tr>)\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                        <table className=\"unitTableOuter\">\r\n                            Team Two's Units\r\n                            <tbody>\r\n                                <tr className=\"unitTable\">\r\n                                    <th className=\"unitTableEntry\">{names[4]}</th>\r\n                                    <th className=\"unitTableEntry\">{names[5]}</th>\r\n                                    <th className=\"unitTableEntry\">{names[6]}</th>\r\n                                    <th className=\"unitTableEntry\">{names[7]}</th>\r\n                                </tr>\r\n                                {teamTwo.map((item, index) => {\r\n                                    return(\r\n                                    <tr key={index} className=\"unitTable\">\r\n                                        <td className=\"unitTableEntry\">{item[0]}</td>\r\n                                        <td className=\"unitTableEntry\">{item[1]}</td>\r\n                                        <td className=\"unitTableEntry\">{item[2]}</td>\r\n                                        <td className=\"unitTableEntry\">{item[3]}</td>\r\n                                    </tr>)\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                }\r\n            </div>\r\n        :\r\n            <div className=\"container\">\r\n                placeholder draft\r\n                <Select className=\"selectButton\"\r\n                    options = {raceOptions} \r\n                    components = {{ DropdownIndicator: () => null, IndicatorSeperator:() => null}}\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Random;","E:\\mtl_website\\mtl-website\\src\\socketConstant.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":2,"column":8,"nodeType":"74","messageId":"75","endLine":2,"endColumn":14},{"ruleId":"72","severity":1,"message":"76","line":2,"column":9,"nodeType":"74","messageId":"75","endLine":2,"endColumn":15},{"ruleId":"72","severity":1,"message":"77","line":4,"column":9,"nodeType":"74","messageId":"75","endLine":4,"endColumn":28},{"ruleId":"72","severity":1,"message":"78","line":5,"column":10,"nodeType":"74","messageId":"75","endLine":5,"endColumn":16},{"ruleId":"79","severity":1,"message":"80","line":34,"column":21,"nodeType":"81","messageId":"82","endLine":34,"endColumn":23},{"ruleId":"79","severity":1,"message":"80","line":49,"column":25,"nodeType":"81","messageId":"82","endLine":49,"endColumn":27},{"ruleId":"72","severity":1,"message":"83","line":103,"column":9,"nodeType":"74","messageId":"75","endLine":103,"endColumn":18},{"ruleId":"79","severity":1,"message":"80","line":129,"column":43,"nodeType":"81","messageId":"82","endLine":129,"endColumn":45},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'Select' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'PlayBackGroundMusic' is defined but never used.","'render' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'racesTest' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]